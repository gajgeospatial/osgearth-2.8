/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2013 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
// 2014-2015 GAJ Geospatial Enterprises, Orlando FL
// Created FeatureSourceCDB for Incorporation of Common Database (CDB) support within osgEarth
// 2016-2017 Visual Awareness Technologies and Consulting Inc. St Petersburg FL

#ifndef OSGEARTH_DRIVER_CDB_FEATURE_SOURCE_OPTIONS
#define OSGEARTH_DRIVER_CDB_FEATURE_SOURCE_OPTIONS 1
#include <ogc/ogc_IE>

#include <osgEarth/Common>
#include <osgEarth/URI>
#include <osgEarthFeatures/FeatureSource>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;
    using namespace osgEarth::Features;

    /**
     * Options for the CDB feature driver.
     */
    class CDBFeatureOptions : public FeatureSourceOptions // NO EXPORT; header only
    {
    public:
		optional<std::string>& rootDir() { return _rootDir; }
		const optional<std::string>& rootDir() const { return _rootDir; }
		optional<std::string>& fileName() { return _FileName; }
		const optional<std::string>& fileName() const { return _FileName; }
		optional<std::string>& devfileName() { return _DevFileName; }
		const optional<std::string>& devfileName() const { return _DevFileName; }
		optional<std::string>& Limits() { return _Limits; }
		const optional<std::string>& Limits() const { return _Limits; }
		optional<std::string>& EditLimits() { return _EditLimits; }
		const optional<std::string>& EditLimits() const { return _EditLimits; }
#ifdef _DO_GPKG_TESTS
		optional<std::string>& OGC_IE_Tests() { return _OGC_IE_Test; }
		const optional<std::string>& OGC_IE_Tests() const { return _OGC_IE_Test; }
#endif
		optional<int>& minLod() { return _minLod; }
		const optional<int>& minLod() const { return _minLod; }
		optional<int>& maxLod() { return _maxLod; }
		const optional<int>& maxLod() const { return _maxLod; }
		optional<bool>& inflated() { return _inflated; }
		const optional<bool>& inflated() const { return _inflated; }
		optional<bool>& geoTypical() { return _geoTypical; }
		const optional<bool>& geoTypical() const { return _geoTypical; }
		optional<bool>& GS_uses_GTtex() { return _GS_uses_GTtex; }
		const optional<bool>& GS_uses_GTtex() const { return _GS_uses_GTtex; }
		optional<bool>& Edit_Support() { return _Edit_Support; }
		const optional<bool>& Edit_Support() const { return _Edit_Support; }
		optional<bool>& No_Second_Ref() { return _No_Second_Ref; }
		const optional<bool>& No_Second_Ref() const { return _No_Second_Ref; }
		optional<bool>& GT_LOD0_FullStack() { return _GT_LOD0_FullStack; }
		const optional<bool>& GT_LOD0_FullStack() const { return _GT_LOD0_FullStack; }
		optional<bool>& GS_LOD0_FullStack() { return _GS_LOD0_FullStack; }
		const optional<bool>& GS_LOD0_FullStack() const { return _GS_LOD0_FullStack; }
		optional<bool>& Verbose() { return _Verbose; }
		const optional<bool>& Verbose() const { return _Verbose; }
		optional<bool>& ABS_Z_in_M() { return _ABS_Z_in_M; }
		const optional<bool>& ABS_Z_in_M() const { return _ABS_Z_in_M; }
		optional<bool>& Materials() { return _Enable_Subord_Material; }
		const optional<bool>& Materials() const { return _Enable_Subord_Material; }
	public:
        CDBFeatureOptions( const ConfigOptions& opt =ConfigOptions() ) :
          FeatureSourceOptions( opt )
          {
            setDriver( "cdb" );            
            fromConfig( _conf );
          }

          virtual ~CDBFeatureOptions() { }

    public:
        Config getConfig() const {
            Config conf = FeatureSourceOptions::getConfig();
			conf.updateIfSet("root_dir", _rootDir);
			conf.updateIfSet("filename", _FileName);
			conf.updateIfSet("devfilename", _DevFileName);
			conf.updateIfSet("limits", _Limits);
			conf.updateIfSet("edit_limits", _EditLimits);
#ifdef _DO_GPKG_TESTS
			conf.updateIfSet("ogc_ie_test", _OGC_IE_Test);
#endif
			conf.updateIfSet("minlod", _minLod);
			conf.updateIfSet("maxlod", _maxLod);
			conf.updateIfSet("inflated", _inflated);
			conf.updateIfSet("geotypical", _geoTypical);
			conf.updateIfSet("gs_uses_gttex", _GS_uses_GTtex);
			conf.updateIfSet("edit_support", _Edit_Support);
			conf.updateIfSet("no_second_ref", _No_Second_Ref);
			conf.updateIfSet("gt_lod0_full_stack", _GT_LOD0_FullStack);
			conf.updateIfSet("gs_lod0_full_stack", _GS_LOD0_FullStack);
			conf.updateIfSet("verbose", _Verbose);
			conf.updateIfSet("abszinm", _ABS_Z_in_M);
			conf.updateIfSet("materials", _Enable_Subord_Material);
			return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            FeatureSourceOptions::mergeConfig( conf );
            fromConfig( conf );
        }

    private:
        void fromConfig( const Config& conf ) {
			conf.getIfSet("root_dir", _rootDir);
			conf.getIfSet("filename", _FileName);
			conf.getIfSet("devfilename", _DevFileName);
			conf.getIfSet("limits", _Limits);
			conf.getIfSet("edit_limits", _EditLimits);
#ifdef _DO_GPKG_TESTS
			conf.getIfSet("ogc_ie_test", _OGC_IE_Test);
#endif
			conf.getIfSet("minlod", _minLod);
			conf.getIfSet("maxlod", _maxLod);
			conf.getIfSet("inflated", _inflated);
			conf.getIfSet("geotypical", _geoTypical);
			conf.getIfSet("gs_uses_gttex", _GS_uses_GTtex);
			conf.getIfSet("edit_support", _Edit_Support);
			conf.getIfSet("no_second_ref", _No_Second_Ref);
			conf.getIfSet("gt_lod0_full_stack", _GT_LOD0_FullStack);
			conf.getIfSet("gs_lod0_full_stack", _GS_LOD0_FullStack);
			conf.getIfSet("verbose", _Verbose);
			conf.getIfSet("materials", _Enable_Subord_Material);
			conf.getIfSet("abszinm", _ABS_Z_in_M);
		}

		optional<std::string> _rootDir;
		optional<std::string> _Limits;
		optional<std::string> _EditLimits;
		optional<std::string> _FileName;
		optional<std::string> _DevFileName;
#ifdef _DO_GPKG_TESTS
		optional<std::string> _OGC_IE_Test;
#endif
		optional<int> _minLod;
		optional<int> _maxLod;
		optional<bool>_inflated;
		optional<bool>_geoTypical;
		optional<bool>_GS_uses_GTtex;
		optional<bool>_Edit_Support;
		optional<bool>_No_Second_Ref;
		optional<bool>_GT_LOD0_FullStack;
		optional<bool>_GS_LOD0_FullStack;
		optional<bool> _Verbose;
		optional<bool> _ABS_Z_in_M;
		optional<bool> _Enable_Subord_Material;
	};

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_CDB_FEATURE_SOURCE_OPTIONS

